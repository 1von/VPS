反向代理其实也是跳板，你访问 A 的时候， A 就会访问 B ，并把 B 的内容返回给你。

比如 google 。。你可以用没被墙的 IP 做个反代，这样大家访问这个网站就相当于访问 google 了。。



有几种情况下你可能需要反向代理 :

比如你在法国租用了一台服务器，国内速度太慢了，这时你就可以在香港找个 vps 反代这个法国服务器，这样你访问这个网站因为通过香港的中转速度就会变快。而且由于反代服务器对性能不要求，所以价格就很便宜。
如果你不想暴露真实的 IP 地址，那么就可以在前端搭建一个反向代理服务器，让用户都是访问反向代理服务器。
因为有些网站被墙了。。比如 google 。。你可以用没被墙的 IP 做个反代，这样大家访问这个网站就相当于访问 google 了。。




反向代理应用最广的就是 nginx 了，所以这里以 nginx 为例。











🔵 server {} 配置.


🔸 root

这个是托管静态站点最关键的部分。如果你只是想用它来托管一些html和css文件，root部分要定义的就是这些文件存放的路径。我喜欢把文件放在 /var/www 目录下，因此我们在这里建立一个文件夹。使用 mkdir 创建 /var/www/example 目录,建立一个空白的 index.html 文件，随便添加一些段落输出hello world之类的内容。代码如下：

server {
    listen 80;
    server_name example.com;
    root /var/www/example;
}
基本变量设置完毕，下一步配置路由。




location

Location接受两个参数，一个字符串或者正则和一段代码。字符串或者正则用于匹配某个特定目录。如果你想让用户在访问 example.com/whaterver 时访问某个特定页面，你需要将 whatever 设置为uri地址。在这里我们只需要访问root目录，因此只需要加上 / 即可，内容暂时为空，后面再做解释。

server {
    listen 80;
    server_name example.com;
    root /var/www/example;

    location / {
        
    }
}
第一参数可以有很多种写法，你可以参考上面给出的链接。在以上区块内，我们需要路由指向结果页面。注意 / 会匹配所有的url地址，因为在这里它被解释为一个正则。如果你只想匹配某个准确的字符串，只需要在前面加上一个等号，写法如下：

location = / { ... }
现在我们需要完成之前的代码。我们可以在区块内添加另外一段指令，用于加载名为 try_files 的文件。Try fiels接受了一组文件名或者正则，用于在根目录下查找，并会加载查找到的第一个结果。对于我们的静态服务器来讲，我们希望找到一个在 / 之后紧跟着whatever的文件，例如 whatever.html. 如果在斜线后面没有任何内容，则会寻找 index.html. 在上面给出的文档链接种你可以找到更多的关于如何设置该选项的吸纳关系介绍，这里我们只写一些简单的配置：

server {
    listen 80;
    server_name example.com;
    root /var/www/example;

    location / {
        try_files $url $url/ /index.html;    
    }
}
你可能会奇怪上面的 $url 是从哪里来的？其实是nginx所提供的。每次有请求时，nginx会生成一系列变量，这些变量存储了请求的相关信息。这里的uri就是我们将要了解的内容之一。

来自 http://example.com 的请求进入。
nginx找到server片段代码，其中 server_name 为 example.com ，并使用它来处理请求
nginx匹配任意请求。因为这里的 / 会匹配根域名下的任意内容。
在匹配到的location代码种，nginx开始试图加载一个文件。首先寻找一个未命名的文件，因为这里的url匹配的就是没有名称的文件，所以无法找到。接着开始查找未命名的目录，结果还是找不到。最后开始查找并加载根目录下 /index.html 。
接下来想象一下如果你添加一个名为 test.html 的文件到根目录下并访问 http://example.com/test.html .自己试一下你就知道了。

你可以任意的去尝试改变这里的配置环境。例如，在carrot.is这个网站里，但用户访问某个文件并且没有加上 .html 后缀时，try_files同样会查找 $uri.html 并匹配相应结果。因此在你访问 http://carrot.is.about 和 http://carrot.is/about.html 时你会得到相同的文件。你可以充分发挥你的想象力去设置你的配置文件。

启动服务
总结一下我们所做的事情。首先添加了 server 选项，在nginx运行时，会查找 /etc/sites-enabled 目录下的所有配置文件用于显示对应内容。但是请等一下，你可能无法马上得到结果－因为nginx并不知道你所作的这些改动。为了让nginx真正读取新配置文件，你需要重启服务器，运行以下命令：

service nginx reload
注意：这里的 service 命令实际上是调用了配置文件里内容，这些都在使用 apt 时被生成。这里调用的实际上是 /etc/init.d/nginx reload .
接下来就是访问服务器IP地址便可得到你想要的页面。
























main

events {                       ➜  nginx 工作模式
    use kqueue;                ➜ 可选值: select/kqueue/qpoll .mac平台用kqueue
    worker_connections  1024;  ➜ 每个进程的最大连接数. 也就是前端最大请求数量.
   }


http {   http服务器相关设置. 最主要就是 server、upstream 两个模块
    ....


    upstream iyangyi.com {   指定了一个负载均衡器的名称iyangyi.com
    
     ip_hash;   ➜ 一种负载均衡调度算法: 每个请求按访问IP的hash结果分配，
                ➜ 这样来自同一个IP的访客固定访问一个后端服务器，
                ➜ 有效解决了动态网页存在的session共享问题。

    server 192.168.12.1:80;           ➜ server指令指定后端服务器的IP地址和端口，
    server 192.168.12.4:8080;   
    server 192.168.12.2:80 down;    ‍  ➜  当前的server暂时不参与负载均衡。
    server 192.168.12.3:8080  max_fails=3  fail_timeout=20s;
                                      ➜ max_fails，   允许请求失败的次数，默认为1。
                                      ➜ fail_timeout，max_fails失败后，暂停服务的时间. 
    server 192.168.12.5:8080 backup;  ➜ 备份服务器,其他机器出现故障/忙时启用.


    
    }

    server  {  http的子模块.里面还有个location模块. 每个server可以指定一个虚拟主机.

                listen       8080;         ➜  指定这个虚拟主机的端口.
                server_name  localhost 192.168.12.10 www.yangyi.com;
                                        ➜  指定该虚拟主机的IP/域名. 多域名用空格分开
                root   /Users/yangyi/www;  ➜ 这个虚拟主机的网站根目录.
                index  index.php index.html index.htm;                ➜ 设置默认首页地址!
                charset utf-8;                                        ➜ 设置网页编码格式.
                access_log  usr/local/var/log/host.access.log  main;  ➜ 日志路径
                aerror_log  usr/local/var/log/host.error.log  error;  ➜ 日志路径
                ....


                location / {                 ➜ 最主要模块:负载均衡、反向代理、虚拟域名.. 
                                             ➜ 这个模块用定位URL.解析URL(支持正则匹配)
                                             ➜ / 的意思就是匹配访问根目录.
                                             ➜ 开启正则式匹配(加~):location ~ \.php$ 
                    root   /Users/yangyi/www;      ➜ 指定该虚拟主机的web目录.
                    index  index.php index.html;   ➜ 指定默认首页
                

                }




            }




    server  {  主机2 设置
                location {  URL 匹配    }
            }
    server  {  主机3 设置
                location {  URL 匹配    }
            }            
    ....
}










⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️


🔵 Nginx 安装
        LNMP 环境安装好. 
        浏览器地址栏就可以通过 IP地址 来访问服务器默认网页了!!
        这个默认页面 有链接  可以用 myphpadmin 直接连到数据库.
        这个默认网页在服务器的 /home/wwwroot/default/index.html
        /home/wwwroot/default/ 这个就是网站的根目录!!!!

        下面我们来搭建 ss-panel.
        终端进入到网站根目录下执行下面命令
        🔅 git clone https://github.com/monokoo/ss-panel.git
        这个是下载文件
        🔅 mv ss-panel/.git . && rm -rf ss-panel && git reset --hard
        这个是解压文件.

        🔅 curl -sS https://getcomposer.org/installer | php
        好像也是下载文件
        🔅 php composer.phar  install
        安装文件...
        这里 php组件 需要 php版本 >5.6  不然报错.

        然后 把.env.example 文件名重命名成 .env
        🔅 cp .env.example .env

        修改权限
        🔅 chmod -R 777 storage


        然后就可以导入sql文件夹里面的 文件了.
        最后就是进程 nginx 的配置了..









🔵 绑定域名:
1. 首先域名提供商里 
添加个a记录. 把域名指向ip.
这步完成后 这时候 输入域名是不能访问服务器上网站的.
服务器上也必须设置过 才能 实现用网址访问IP.


先进行域名解析:








❤️❤️ nginx 操作命令

✔︎ 查看版本:    nginx -v

✔︎ 安装Nginx    包管理器安装 / 源码编译安装.


  📌包管理器安装方式1: CentOS 亲测可用
    官方的源中不包含nginx,要先下载并安装一个rpm包,
    这个包会给yum添加一个源.之后就能用 yum 安装 ngixn了

    1. 下载对应的rpm包
    wget http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm

    2. 安装这个rpm包
    rpm -ivh nginx-release-centos-6-0.el6.ngx.noarch.rpm 

    3. 安装nginx  
    yum install nginx



  📌包管理器安装方式2: 
        https://gist.github.com/ifels/c8cfdfe249e27ffa9ba1


  📌编译安装:
        1 wget http://nginx.org/download/nginx-1.4.2.tar.gz 
        2 tar -zxvf nginx-1.4.2.tar.gz
        3 mv nginx-1.4.2 nginx
        4 cd nginx
        5 ./configure --prefix=/usr/local/nginx # 编译选项配置，这里从简
        6 make && make install # 编译安装
        7 ln -s /usr/local/nginx/sbin/nginx /usr/sbin/nginx



📌 Nginx 常用操作
Usage: nginx {start|stop|restart|condrestart|try-restart|force-reload|upgrade|
reload|status|help|configtest|check-reload}

    /etc/init.d/nginx start      # 启动Nginx服务
    /etc/init.d/nginx stop       # 停止Nginx服务
    /etc/init.d/nginx force-quit # 强制退出 Nginx服务
    /etc/init.d/nginx status     # 查看Nginx服务状态

    /etc/nginx/nginx.conf        # Nginx配置文件位置
    chkconfig nginx on           # 设为开机启动
    启动后 就能访问 Nginx 的欢迎页面了.
    如果不出现这个页面. 需要重装. 或者是防火墙问题.




📌 查看进程
    ps -ef|grep nginx 


📌 卸载 Nginx

    1. 先停止服务.
        service nginx stop
    2. 移除自动启动项
        chkconfig nginx off
    3. 然后删除文件夹...
        rm -rf /etc/nginx
        rm -rf /etc/init.d/nginx


      如果你是用 yum 安装的 那就可以用 yum来卸载.
      如果你不是用 yum安装的 那就用其他办法来卸载.

















✔︎ 查看详细信息:
    [root@localhost default]# nginx -V
    nginx version: nginx/1.10.0
    built by gcc 4.4.7 20120313 (Red Hat 4.4.7-17) (GCC)
    built with OpenSSL 1.0.1e-fips 11 Feb 2013
    TLS SNI support enabled
    configure arguments: --user=www --group=www --prefix=/usr/local/nginx --with-http_stub_status_module
    --with-http_ssl_module --with-http_v2_module --with-http_gzip_static_module --with-ipv6 --with-http_s
    ub_module

✔︎ nginx 启动:      /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf
✔︎ 开启nginx服务器  sudo service nginx start


✔︎ 查看进程:      ps -ef |grep nginx
  [root@localhost default]# ps -ef |grep nginx
  root     22559     1  0 09:21 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx -c
  /usr/local/nginx/conf/nginx.conf
  www      22560 22559  0 09:21 ?        00:00:00 nginx: worker process
  root     23283 12694  0 10:34 pts/2    00:00:00 grep nginx


✔︎ 重启nginx
  /usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf
  其中 -t 表示测试，并不真正执行。 

  然后，通过以下命令重加载Nginx配置：
  kill -HUP master进程号


Nginx支持以下几种信号控制：
  TERM, INT 快速关闭
  QUIT 从容关闭
  HUP 平滑重启
  USR1 重新打开日志文件，在切割文件时用处大
  USR2 平滑升级
  WINCH 从容关闭工作进程
  我们可以通过信号停止Nginx主进程，首先，我们需要通过 ps -ef | grep 命令获得master进程的PID，或者通过cat pid文件获得主进程号。下面是几个典型的停止语句：


  #从容停止Nginx  
  kill -QUIT master进程号  
  #快速停止Nginx  
  kill -TERM master进程号  
  #强制停止Nginx  
  kill -9 master进程号










❤️ Nginx 配置

📌 一般安装在 /usr/local/nginx 下面.





启动 $ /usr/local/nginx/sbin/nginx
        检查是否启动成功：
        打开浏览器访问此机器的 IP，如果浏览器出现 Welcome to nginx! 则表示 Nginx 已经安装并运行成功。

重启：  $ /usr/local/nginx/sbin/nginx –s reload
✔︎ 停止： $ /usr/local/nginx/sbin/nginx –s stop
测试配置文件是否正常：  $ /usr/local/nginx/sbin/nginx –t

强制关闭：$ pkill nginx


🔵 配置文件:    vi /usr/local/nginx/conf/nginx.conf

Nginx配置文件常见结构的从外到内依次是「http」「server」「location」等等，
缺省的继承关系是从外到内，也就是说内层块会自动获取外层块的值作为缺省值。

Server

接收请求的服务器需要将不同的请求按规则转发到不同的后端服务器上，在 nginx 中我们可以通过构建虚拟主机（server）的概念来将这些不同的服务配置隔离。

server {
    listen       80;
    server_name  localhost;
    root   html;
    index  index.html index.htm;
}

这里的 listen 指监听端口，
server_name 用来指定IP或域名，多个域名对应统一规则可以空格分开，
index 用于设定访问的默认首页地址，
root 指令用于指定虚拟主机的网页跟目录，这个地方可以是相对地址也可以是绝对地址。












server {  
    listen 80;
    server_name example.com;
    root /var/www/ss-panel/public/;
    index index.php index.html index.htm;
    location / {
        try_files $uri $uri/ /index.php$is_args$args;
    }
    location ~ \.php$ {
        try_files $uri =404;
                fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock;
                fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                include fastcgi_params;
    }
}

当然这是典型配置，记得把 example.com 换成你自己的网址。



http://23.105.192.96/index.php

The 23.105.192.96 page isn’t working

23.105.192.96 is currently unable to handle this request.
HTTP ERROR 500

500 说明是服务器问题. 
服务器是 nginx  没启动还是...






❤️ 网站配置  Nginx

📌 一键脚本安装好后:  创建一个虚拟主机:
    lnmp vhost add

    一步步... 最后会问你是否要安装数据库.这里选否 ss的数据库我们自己安装.

    Restart Nginx......
    ================================================
    Virtualhost infomation:
    Your domain: www.0214.help
    Home Directory: /home/wwwroot/www.0214.help
    Rewrite: other
    Enable log: yes
    Create database: no
    Create ftp account: no
    ================================================


📌 下载 ss-panel




📌 Nginx 网站根目录:
    一键脚本环境安装好的最后有提示的. 下面这行就是网站根目录.    
    Default directory: /home/wwwroot/default


📌 Nginx 配置文件:
  /usr/local/nginx/conf/vhost/ss.panel.conf



修改完了之后，到网站目录下进行一些修改。
[root@vultr vhost]# cd /home/wwwroot/ss.panel/
[root@vultr ss.panel]# chattr -i .user.ini
[root@vultr ss.panel]# mv .user.ini public
[root@vultr ss.panel]# cd public








ss-panel 应该先下载 解压出来. 解压后的一大堆文件夹 都放在 wwwroot 下面








卸载 重装 nginx

yum install
yum remove



虚拟主机有很多类型. 基于IP/基于域名/基于端口.
一般一个服务器也就一个iP和一个域名. 所以基于端口的虚拟主机最常见.

配置简单..  一个网站,一个端口,一个 server,一个根目录.
基于端口的话. 服务器上虚拟主机只需要创建一个!!!
要添加端口 .去配置文件中 添加 server就可以了.


















⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️
一个ip可以有很多网站!  给不同的路径就可以了.
nginx 用ip 和 用域名访问的默认路径是不同的!
域名访问是要配置过的.
ip访问只要文件放到 /home/wwwroot/default 下面如 xx.html 就可以用23.105.192.96/xx.html访问.


默认




网站1: /home          www.0214.help
网站2: /home/puppet  www.0214.help/puppet
网站3: /home/zabbix  www.0214.help/zabbix

网站4: 



默认网站根目录是 /home
把puppet相关内容放到/home/puppet文件夹下.
把zabbix相关内容放到/home/zabbix文件夹下.
把skilltree 相关内容放到 /home/skilltree 文件夹下




