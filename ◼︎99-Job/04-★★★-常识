🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸STAR🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸

❤️ STAR法则:  Situation Task Action Result
    • Situation    事情是在什么情况下发生
    • Task：       你是如何明确你的任务的
    • Action       针对这样的情况分析，你采用了什么行动方式
    • Result：     结果怎样，在这样的情况下你学习到了什么


❗️❗️STAR法则 就是一种讲述自己故事的方式，一个清晰、条理的作文模板; ❗️❗️
❗️❗️STAR法则 就是一种讲述自己故事的方式，一个清晰、条理的作文模板; ❗️❗️
❗️❗️STAR法则 就是一种讲述自己故事的方式，一个清晰、条理的作文模板; ❗️❗️

❗️❗️让面试者条理清晰、逻辑性强的描述自己, 让面试官在短时间内快速了解面试者.❗️❗️
❗️❗️让面试者条理清晰、逻辑性强的描述自己, 让面试官在短时间内快速了解面试者.❗️❗️
❗️❗️让面试者条理清晰、逻辑性强的描述自己, 让面试官在短时间内快速了解面试者.❗️❗️

🔸 STAR 用处
    你可以用在写简历工作经验/项目经验上.

    也可以在回答面试官提问的时候.

❗️❗️ 对于无法清晰的描述过往经历的人，通常会在简历上备注： 不推荐复试！❗️❗️


🔸 STAR Misc
    所以，写简历时就要准备好面试时的个人故事，以便应付各种千奇百怪的开放性问题。


🔸 挖掘闪光点
    面试肯定有开放性问题.
    其实每一个开放性问题都在考查自己的每一项能力，如领导能力，沟通能力，适应能力等等。
    而挖掘闪光点就是在这些事件模块中找出你所能体现的这些能力，
    比如你是怎么解决某个技术问题的.
    解决问题的思路也是一种优点.






‼️STAR原则‼️
是阿里HR最喜欢提的一点，也是内部面试官反复强调的原则。
S是Situation（场景）、
T是Task（任务）、
A是Action（行动）
R是Result（结果），
这是描述完整案例的方法论。








🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸 ITIL 🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸

🔸 ITIL 
    以前流行通过ITIL，通过流程的理念来管理IT系统。

    现在大家都讲DEVOPS，提研发、测试和运维的协同。以前ITIL讲分工，发布就是运维的责任，现在DEVOPS强调协同，发布就都让研发去做了。

    这样很合理，因为程序发布这事你让运维去负责，其实大部分情况下出了问题运维根本识别不出来，你说别人写的代码到底有没有问题我怎么知道，真出了问题，耽误了时间，最后事情还是得交由开发来定位和处理。

而DEVOPS重视的就是高效，整个团队协同去处理这个事情，什么样的模式或什么样的人去做这个事情会变得更高效，谁就是第一责任人，我们就让他去负责，这样团队的流转就更高效和科学了。这是理念上的一些变革。

对应这些变革，运维人员的能力要求也有所变化。以前我们搬搬服务器，写个脚本什么的就可以了。但是随着技术和管理理念的变化，现在不一样了，运维也要开始写代码了，JAVA、PYTHON、C++什么的。

运维在公司的角色定位也不太一样了，以前就只是任务实施，现在慢慢朝平台建设，甚至朝运营分析方向转变。我们不但要有能力写代码还得有能力和研发一起讨论架构，和产品进行运营沟通。

真要想把运维做好，你要学的东西太多了。对于各种新技术的学习、应用和融合，如果说每个公司或每个运维都要去重头开始琢磨，那成本会非常大，对人的要求也会非常高。

